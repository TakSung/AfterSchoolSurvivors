{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 환경 설정 및 기본 Pygame 프레임워크 구현",
        "description": "Python 3.13+ 환경에서 Pygame을 이용한 기본 게임 프레임워크와 메인 게임 루프를 구현합니다.",
        "details": "가상환경 생성, Pygame 설치, 기본 게임 윈도우(800x600) 생성, 메인 게임 루프(init, update, draw, event handling), FPS 제한(60fps), 기본 리소스 매니저 클래스 구현. requirements.txt 파일 생성 및 프로젝트 폴더 구조 설정.",
        "testStrategy": "게임 윈도우가 정상적으로 실행되고 안정적인 프레임레이트를 유지하는지 확인. 키보드/마우스 입력 처리 테스트.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "플레이어 캐릭터 시스템 구현",
        "description": "운동부 학생 캐릭터의 마우스 추적 이동과 자동 공격 시스템을 구현합니다.",
        "details": "Player 클래스 생성, 마우스 커서 위치 추적 및 부드러운 이동 알고리즘 구현, 캐릭터 회전 시스템(마우스 방향), 기본 자동 공격 시스템(투사체 생성), 체력 시스템(기본 100hp), 스프라이트 렌더링(2D 도트 스타일). 이동 속도, 공격 속도 등 기본 스탯 설정.",
        "testStrategy": "마우스 이동에 따른 캐릭터 추적, 자동 공격 발사, 체력 감소 테스트. 경계선 충돌 방지 확인.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "적 캐릭터 시스템 및 AI 구현",
        "description": "국어, 수학, 교장 선생님 3종의 적 캐릭터와 각각의 공격 패턴을 구현합니다.",
        "details": "Enemy 베이스 클래스 및 3개 파생 클래스 구현. 국어선생님(느린 이동, 넓은 범위 공격), 수학선생님(빠른 이동, 직선 돌진), 교장선생님(보스급, 복합 공격패턴). 적 스포너 시스템, 충돌 감지, 플레이어 추적 AI, 체력 시스템, 사망 처리 및 경험치 드롭.",
        "testStrategy": "각 적 타입별 고유 행동 패턴 확인, 플레이어 추적 및 공격, 체력 시스템 동작, 경험치 생성 테스트.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "경험치 및 레벨업 시스템 구현",
        "description": "적 처치 시 경험치 획득과 레벨업 시 아이템 선택 시스템을 구현합니다.",
        "details": "Experience 클래스 구현, 경험치 획득 로직, 레벨업 계산 공식, 레벨업 시 게임 일시정지 및 아이템 선택 UI 표시. 2개의 무작위 아이템 선택지 생성 로직, 아이템 선택 후 게임 재개. 레벨별 필요 경험치 곡선 설계(지수 증가).",
        "testStrategy": "적 처치 후 경험치 획득, 레벨업 발생, 아이템 선택 UI 표시 및 선택 후 정상 진행 확인.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "아이템 시스템 및 인벤토리 구현",
        "description": "7종 아이템(무기 3종, 능력 4종)과 6칸 슬롯 시스템을 구현합니다.",
        "details": "Item 베이스 클래스 및 7개 아이템 클래스 구현. 무기: 축구공, 농구공, 야구배트. 능력: 축구화, 농구화, 홍삼, 우유. Inventory 클래스(6칸 제한), 동일 아이템 획득 시 레벨업 로직(최대 5레벨), 각 아이템별 레벨별 효과 정의. 아이템 효과 적용 시스템(스탯 버프, 공격 강화 등).",
        "testStrategy": "아이템 획득, 슬롯 배치, 동일 아이템 레벨업, 각 아이템 효과 적용 확인. 인벤토리 가득 찬 상황 처리 테스트.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "아이템 시너지 시스템 구현",
        "description": "특정 아이템 조합 시 발동되는 시너지 효과를 구현합니다.",
        "details": "Synergy 매니저 클래스 구현, 시너지 조합 검사 로직. 축구공+축구화: 축구공 데미지 30% 증가, 야구배트+농구화: 점프 착지 시 야구배트 자동 1회 휘두르기. 시너지 활성화/비활성화 시스템, 시너지 상태 UI 표시, 시너지 효과 실시간 적용/해제.",
        "testStrategy": "각 시너지 조합 획득 시 효과 활성화, 아이템 제거 시 시너지 해제, 시너지 효과 정확한 적용 확인.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "난이도 곡선 및 적 강화 시스템 구현",
        "description": "시간에 따른 난이도 증가와 적 능력치 강화 시스템을 구현합니다.",
        "details": "DifficultyManager 클래스 구현, 게임 타이머 시스템. 5분마다 적 공격속도/투사체속도 30% 증가, 5분/10분 시점에 적 공격력/이동속도 1.6배/2.0배 증가. 적 개체 수는 일정 유지, 적 스탯 동적 조정 시스템. 교장선생님 특정 시간마다 등장 로직.",
        "testStrategy": "5분, 10분 경과 시 적 능력치 변화 확인, 교장선생님 등장 타이밍, 난이도 증가에 따른 게임플레이 변화 테스트.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "함정 시스템 구현",
        "description": "3분 후부터 생성되는 압정 함정과 이동속도 감소 효과를 구현합니다.",
        "details": "Trap 클래스 구현, 3분 후 압정 함정 무작위 생성 시스템. 플레이어만 영향받는 충돌 감지, 밟을 시 3초간 이동속도 20% 감소 효과, 최대 3회 중첩(60% 감소). 함정 시각적 표시, 디버프 상태 UI, 시간에 따른 디버프 해제 시스템.",
        "testStrategy": "3분 후 함정 생성, 플레이어 충돌 시 디버프 적용, 중첩 효과, 시간 경과 후 효과 해제 확인.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "게임 UI/UX 및 화면 시스템 구현",
        "description": "게임 화면, HUD, 메뉴, 게임오버 화면 등 사용자 인터페이스를 구현합니다.",
        "details": "GameScreen 매니저 구현(메인메뉴, 게임플레이, 게임오버), HUD 시스템(체력바, 경험치바, 레벨, 생존시간, 아이템 슬롯 표시), 아이템 선택 UI, 게임오버 화면(생존시간 기록, 재시작 버튼). 재도전 욕구를 불러일으키는 메시지 시스템, 키보드 단축키(ESC, R 등).",
        "testStrategy": "각 화면 전환, HUD 정보 실시간 업데이트, 아이템 선택 UI 동작, 게임오버 후 재시작 기능 확인.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "성능 최적화 및 게임 완성도 향상",
        "description": "40 FPS 이상 성능 확보와 게임 전반적인 완성도를 높입니다.",
        "details": "프레임레이트 최적화(스프라이트 배칭, 불필요한 렌더링 제거), 메모리 관리 최적화, 오브젝트 풀링 시스템 적용. 사운드 효과 추가(공격, 레벨업, 적 처치), 간단한 파티클 효과, 게임 밸런스 조정, 버그 수정 및 예외처리 강화. 2D 도트 또는 SVG 벡터 스타일 그래픽 완성.",
        "testStrategy": "다양한 환경에서 40 FPS 이상 유지 확인, 메모리 누수 검사, 장시간 플레이 안정성 테스트, 전체 게임플레이 시나리오 테스트.",
        "priority": "low",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-06T10:05:12.101Z",
      "updated": "2025-08-06T10:05:12.101Z",
      "description": "Tasks for master context"
    }
  }
}