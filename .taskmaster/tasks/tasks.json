{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 환경 설정 및 기본 Pygame 프레임워크 구현",
        "description": "Python 3.13+ 환경에서 Pygame을 이용한 기본 게임 프레임워크와 메인 게임 루프를 구현합니다.",
        "details": "가상환경 생성, Pygame 설치, 기본 게임 윈도우(800x600) 생성, 메인 게임 루프(init, update, draw, event handling), FPS 제한(60fps), 기본 리소스 매니저 클래스 구현. requirements.txt 파일 생성 및 프로젝트 폴더 구조 설정.",
        "testStrategy": "게임 윈도우가 정상적으로 실행되고 안정적인 프레임레이트를 유지하는지 확인. 키보드/마우스 입력 처리 테스트.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "플레이어 캐릭터 시스템 구현",
        "description": "운동부 학생 캐릭터의 마우스 추적 이동과 자동 공격 시스템을 구현합니다.",
        "details": "Player 클래스 생성, 마우스 커서 위치 추적 및 부드러운 이동 알고리즘 구현, 캐릭터 회전 시스템(마우스 방향), 기본 자동 공격 시스템(투사체 생성), 체력 시스템(기본 100hp), 스프라이트 렌더링(2D 도트 스타일). 이동 속도, 공격 속도 등 기본 스탯 설정.",
        "testStrategy": "마우스 이동에 따른 캐릭터 추적, 자동 공격 발사, 체력 감소 테스트. 경계선 충돌 방지 확인.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "적 캐릭터 시스템 및 AI 구현",
        "description": "국어, 수학, 교장 선생님 3종의 적 캐릭터와 각각의 공격 패턴을 구현합니다.",
        "details": "Enemy 베이스 클래스 및 3개 파생 클래스 구현. 국어선생님(느린 이동, 넓은 범위 공격), 수학선생님(빠른 이동, 직선 돌진), 교장선생님(보스급, 복합 공격패턴). 적 스포너 시스템, 충돌 감지, 플레이어 추적 AI, 체력 시스템, 사망 처리 및 경험치 드롭.",
        "testStrategy": "각 적 타입별 고유 행동 패턴 확인, 플레이어 추적 및 공격, 체력 시스템 동작, 경험치 생성 테스트.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Enemy 베이스 클래스 설계 및 구현",
            "description": "모든 적 캐릭터의 공통 기능을 담당하는 베이스 클래스를 구현합니다.",
            "dependencies": [],
            "details": "Enemy 베이스 클래스에 체력, 이동속도, 공격력, 위치 등 기본 속성과 이동, 공격, 피해받기, 사망 등 공통 메서드를 정의합니다. 적 타입 열거형과 상태 관리 시스템도 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "국어선생님 캐릭터 구현",
            "description": "느린 이동과 넓은 범위 공격을 가진 국어선생님 캐릭터를 구현합니다.",
            "dependencies": [
              "3.1"
            ],
            "details": "KoreanTeacher 클래스 구현. 느린 이동속도와 부채꼴 모양의 넓은 범위 공격 패턴을 가집니다. 플레이어를 향해 천천히 접근하며 일정 거리에서 범위 공격을 실행합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "수학선생님 캐릭터 구현",
            "description": "빠른 이동과 직선 돌진 공격을 가진 수학선생님 캐릭터를 구현합니다.",
            "dependencies": [
              "3.1"
            ],
            "details": "MathTeacher 클래스 구현. 빠른 이동속도와 플레이어를 향한 직선 돌진 공격을 가집니다. 일정 거리에서 플레이어 방향으로 빠르게 돌진하며 충돌 시 피해를 줍니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "교장선생님 보스 캐릭터 구현",
            "description": "복합 공격 패턴을 가진 교장선생님 보스 캐릭터를 구현합니다.",
            "dependencies": [
              "3.1"
            ],
            "details": "PrincipalBoss 클래스 구현. 높은 체력과 여러 공격 패턴을 가진 보스 캐릭터입니다. 원형 탄막, 추적 미사일, 순간이동 등 다양한 공격 패턴을 단계별로 실행합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "적 스포너 및 생성 시스템 구현",
            "description": "적 캐릭터들을 게임 필드에 생성하고 관리하는 스포너 시스템을 구현합니다.",
            "dependencies": [
              "3.2",
              "3.3",
              "3.4"
            ],
            "details": "EnemySpawner 클래스 구현. 화면 밖에서 적을 생성하고 최대 개체 수 관리, 생성 주기 조절, 적 타입별 생성 비율 설정 기능을 포함합니다. 시간에 따른 생성 패턴 변화도 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "플레이어 추적 AI 로직 구현",
            "description": "적 캐릭터들이 플레이어를 추적하고 공격하는 AI 로직을 구현합니다.",
            "dependencies": [
              "3.2",
              "3.3",
              "3.4"
            ],
            "details": "플레이어 위치 추적, 경로 계산, 공격 범위 판단 등의 AI 로직을 구현합니다. 각 적 타입별로 다른 추적 방식과 공격 패턴을 적용하며, 장애물 회피 기능도 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "충돌 감지 및 체력 시스템 구현",
            "description": "적과 플레이어/무기 간의 충돌 감지와 체력 관리 시스템을 구현합니다.",
            "dependencies": [
              "3.5",
              "3.6"
            ],
            "details": "CollisionManager 클래스 구현. 적-플레이어, 적-무기 간 충돌 감지와 피해 계산, 체력 감소, 무적 시간 처리 등을 담당합니다. 효율적인 충돌 감지를 위한 공간 분할 기법도 적용합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "사망 처리 및 경험치 드롭 시스템 구현",
            "description": "적 캐릭터 사망 시 처리와 경험치 오브 생성 시스템을 구현합니다.",
            "dependencies": [
              "3.7"
            ],
            "details": "적 사망 시 사망 애니메이션, 오브젝트 제거, 경험치 오브 생성 등을 처리합니다. ExpOrb 클래스 구현으로 경험치 오브의 생성, 플레이어 자동 수집, 경험치 획득 처리를 담당합니다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "경험치 및 레벨업 시스템 구현",
        "description": "적 처치 시 경험치 획득과 레벨업 시 아이템 선택 시스템을 구현합니다.",
        "details": "Experience 클래스 구현, 경험치 획득 로직, 레벨업 계산 공식, 레벨업 시 게임 일시정지 및 아이템 선택 UI 표시. 2개의 무작위 아이템 선택지 생성 로직, 아이템 선택 후 게임 재개. 레벨별 필요 경험치 곡선 설계(지수 증가).",
        "testStrategy": "적 처치 후 경험치 획득, 레벨업 발생, 아이템 선택 UI 표시 및 선택 후 정상 진행 확인.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "아이템 시스템 및 인벤토리 구현",
        "description": "7종 아이템(무기 3종, 능력 4종)과 6칸 슬롯 시스템을 구현합니다.",
        "details": "Item 베이스 클래스 및 7개 아이템 클래스 구현. 무기: 축구공, 농구공, 야구배트. 능력: 축구화, 농구화, 홍삼, 우유. Inventory 클래스(6칸 제한), 동일 아이템 획득 시 레벨업 로직(최대 5레벨), 각 아이템별 레벨별 효과 정의. 아이템 효과 적용 시스템(스탯 버프, 공격 강화 등).",
        "testStrategy": "아이템 획득, 슬롯 배치, 동일 아이템 레벨업, 각 아이템 효과 적용 확인. 인벤토리 가득 찬 상황 처리 테스트.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Item 베이스 클래스 및 아이템 타입 열거형 정의",
            "description": "아이템 시스템의 핵심이 되는 베이스 클래스와 아이템 타입들을 정의합니다.",
            "dependencies": [],
            "details": "Item 추상 베이스 클래스 구현 (id, name, type, level, max_level, description 속성), ItemType 열거형 정의 (WEAPON, ABILITY), ItemID 열거형 정의 (7개 아이템), 아이템 레벨별 효과 계산을 위한 추상 메서드 정의 (get_effect, apply_effect)",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "무기 아이템 클래스 구현 (축구공, 농구공, 야구배트)",
            "description": "3종의 무기 아이템 클래스를 구현하여 각각 고유한 공격 효과를 제공합니다.",
            "dependencies": [
              "5.1"
            ],
            "details": "WeaponItem 베이스 클래스 구현, SoccerBall 클래스 (투사체 속도 증가, 레벨당 10% 증가), BasketballItem 클래스 (투사체 크기 증가, 레벨당 15% 증가), BaseballBat 클래스 (공격력 증가, 레벨당 20% 증가), 각 무기별 레벨별 효과 테이블 정의",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "능력 아이템 클래스 구현 (축구화, 농구화, 홍삼, 우유)",
            "description": "4종의 능력 아이템 클래스를 구현하여 플레이어 스탯을 강화합니다.",
            "dependencies": [
              "5.1"
            ],
            "details": "AbilityItem 베이스 클래스 구현, SoccerShoes 클래스 (이동속도 증가, 레벨당 8% 증가), BasketballShoes 클래스 (점프력/회피 증가, 레벨당 10% 증가), RedGinseng 클래스 (최대체력 증가, 레벨당 25hp 증가), Milk 클래스 (체력재생 속도 증가, 레벨당 초당 2hp 증가), 각 능력별 레벨별 효과 테이블 정의",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Inventory 클래스 및 6칸 슬롯 시스템 구현",
            "description": "6개 슬롯으로 제한된 인벤토리 시스템을 구현합니다.",
            "dependencies": [
              "5.1"
            ],
            "details": "Inventory 클래스 구현 (6개 슬롯 배열), add_item 메서드 (동일 아이템 레벨업 로직 포함), remove_item 메서드, get_item 메서드, is_full 속성, get_items_by_type 메서드, 슬롯 인덱스 관리 시스템, 인벤토리 직렬화/역직렬화 기능",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "아이템 레벨업 시스템 구현 (최대 5레벨)",
            "description": "동일한 아이템 획득 시 레벨업하는 시스템을 구현합니다.",
            "dependencies": [
              "5.2",
              "5.3",
              "5.4"
            ],
            "details": "레벨업 로직 구현 (동일 아이템 획득 시 level+1), 최대 레벨 제한 (5레벨), 레벨업 불가능 시 처리 로직, level_up 메서드 구현, can_level_up 메서드 구현, 레벨업 시 이펙트 생성 시스템, 레벨별 효과 증가 공식 적용",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "아이템 효과 적용 시스템 구현",
            "description": "플레이어에게 아이템 효과를 실시간으로 적용하는 시스템을 구현합니다.",
            "dependencies": [
              "5.5"
            ],
            "details": "ItemEffectManager 클래스 구현, 플레이어 스탯에 아이템 효과 적용 로직, apply_all_effects 메서드 (인벤토리 전체 아이템 효과 계산), remove_effects 메서드, 무기 아이템 효과 적용 (투사체 속성 변경), 능력 아이템 효과 적용 (플레이어 스탯 버프), 실시간 효과 업데이트 시스템",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "인벤토리 가득 참 예외 처리 및 아이템 획득 시스템",
            "description": "인벤토리가 가득 찬 상황의 예외 처리와 아이템 획득 플로우를 구현합니다.",
            "dependencies": [
              "5.6"
            ],
            "details": "InventoryFullException 커스텀 예외 클래스 정의, 아이템 획득 시 인벤토리 상태 확인 로직, 가득 찬 상황에서 동일 아이템 레벨업 우선 처리, 새 아이템 획득 불가 시 알림 시스템, 아이템 드롭 처리 (필요 시), 아이템 획득 우선순위 시스템 (레벨업 > 새 아이템), 전체 아이템 시스템 통합 테스트",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "아이템 시너지 시스템 구현",
        "description": "특정 아이템 조합 시 발동되는 시너지 효과를 구현합니다.",
        "details": "Synergy 매니저 클래스 구현, 시너지 조합 검사 로직. 축구공+축구화: 축구공 데미지 30% 증가, 야구배트+농구화: 점프 착지 시 야구배트 자동 1회 휘두르기. 시너지 활성화/비활성화 시스템, 시너지 상태 UI 표시, 시너지 효과 실시간 적용/해제.",
        "testStrategy": "각 시너지 조합 획득 시 효과 활성화, 아이템 제거 시 시너지 해제, 시너지 효과 정확한 적용 확인.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "난이도 곡선 및 적 강화 시스템 구현",
        "description": "시간에 따른 난이도 증가와 적 능력치 강화 시스템을 구현합니다.",
        "details": "DifficultyManager 클래스 구현, 게임 타이머 시스템. 5분마다 적 공격속도/투사체속도 30% 증가, 5분/10분 시점에 적 공격력/이동속도 1.6배/2.0배 증가. 적 개체 수는 일정 유지, 적 스탯 동적 조정 시스템. 교장선생님 특정 시간마다 등장 로직.",
        "testStrategy": "5분, 10분 경과 시 적 능력치 변화 확인, 교장선생님 등장 타이밍, 난이도 증가에 따른 게임플레이 변화 테스트.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "함정 시스템 구현",
        "description": "3분 후부터 생성되는 압정 함정과 이동속도 감소 효과를 구현합니다.",
        "details": "Trap 클래스 구현, 3분 후 압정 함정 무작위 생성 시스템. 플레이어만 영향받는 충돌 감지, 밟을 시 3초간 이동속도 20% 감소 효과, 최대 3회 중첩(60% 감소). 함정 시각적 표시, 디버프 상태 UI, 시간에 따른 디버프 해제 시스템.",
        "testStrategy": "3분 후 함정 생성, 플레이어 충돌 시 디버프 적용, 중첩 효과, 시간 경과 후 효과 해제 확인.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "게임 UI/UX 및 화면 시스템 구현",
        "description": "게임 화면, HUD, 메뉴, 게임오버 화면 등 사용자 인터페이스를 구현합니다.",
        "details": "GameScreen 매니저 구현(메인메뉴, 게임플레이, 게임오버), HUD 시스템(체력바, 경험치바, 레벨, 생존시간, 아이템 슬롯 표시), 아이템 선택 UI, 게임오버 화면(생존시간 기록, 재시작 버튼). 재도전 욕구를 불러일으키는 메시지 시스템, 키보드 단축키(ESC, R 등).",
        "testStrategy": "각 화면 전환, HUD 정보 실시간 업데이트, 아이템 선택 UI 동작, 게임오버 후 재시작 기능 확인.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "GameScreen 매니저 및 화면 전환 시스템 구현",
            "description": "게임의 여러 화면(메인메뉴, 게임플레이, 게임오버)을 관리하는 GameScreen 매니저와 화면 전환 시스템을 구현합니다.",
            "dependencies": [],
            "details": "ScreenManager 클래스 생성, 화면 상태 열거형 정의(MAIN_MENU, GAMEPLAY, GAME_OVER), 화면 전환 메서드 구현, 각 화면별 update/draw 메서드 라우팅",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "메인 메뉴 화면 구현",
            "description": "게임 시작 화면과 메인 메뉴 UI를 구현하고 게임 시작 기능을 연결합니다.",
            "dependencies": [
              "9.1"
            ],
            "details": "MainMenuScreen 클래스 구현, 게임 제목 및 시작 버튼 UI, 키보드 입력 처리(Enter, Space), 게임 시작 시 GameScreen으로 전환, 배경 및 간단한 애니메이션 효과",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "HUD 시스템 구현 - 체력바, 경험치바, 레벨 표시",
            "description": "플레이어의 상태를 실시간으로 표시하는 HUD 시스템의 핵심 요소들을 구현합니다.",
            "dependencies": [
              "9.1"
            ],
            "details": "HUDManager 클래스 생성, 체력바 UI(현재/최대 체력 시각화), 경험치바 UI(현재/다음레벨 경험치), 레벨 숫자 표시, 실시간 데이터 바인딩 시스템",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "생존시간 및 아이템 슬롯 UI 구현",
            "description": "플레이어의 생존 시간과 보유 아이템을 표시하는 UI 시스템을 구현합니다.",
            "dependencies": [
              "9.3"
            ],
            "details": "생존시간 타이머 UI(분:초 형식), 아이템 슬롯 UI(최대 6개), 아이템 아이콘 및 레벨 표시, 시너지 상태 표시 아이콘, 동적 UI 업데이트 시스템",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "레벨업 아이템 선택 UI 구현",
            "description": "레벨업 시 나타나는 아이템 선택 화면과 상호작용을 구현합니다.",
            "dependencies": [
              "9.1"
            ],
            "details": "ItemSelectionScreen 클래스, 게임 일시정지 기능, 2개 아이템 선택지 UI, 아이템 정보 표시(이름, 설명, 아이콘), 마우스/키보드 선택 처리, 선택 후 게임 재개",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "게임오버 화면 및 결과 표시 구현",
            "description": "플레이어 사망 시 나타나는 게임오버 화면과 플레이 결과를 구현합니다.",
            "dependencies": [
              "9.1",
              "9.4"
            ],
            "details": "GameOverScreen 클래스, 최종 생존시간 표시, 처치한 적 수 통계, 달성 레벨 표시, 재도전 욕구를 불러일으키는 메시지 시스템, 시각적 효과 및 애니메이션",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "재시작 및 키보드 단축키 시스템 구현",
            "description": "게임 재시작 기능과 키보드 단축키를 구현하여 사용자 편의성을 향상시킵니다.",
            "dependencies": [
              "9.6"
            ],
            "details": "재시작 버튼 UI 및 기능, 키보드 단축키 시스템(ESC: 메인메뉴, R: 재시작, Space: 일시정지), 게임 상태 초기화 로직, 단축키 도움말 표시",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "UI 애니메이션 및 시각적 피드백 구현",
            "description": "UI 요소들의 애니메이션과 시각적 피드백을 추가하여 게임의 사용자 경험을 향상시킵니다.",
            "dependencies": [
              "9.3",
              "9.4",
              "9.5",
              "9.6"
            ],
            "details": "체력 감소/회복 애니메이션, 경험치바 채워지는 효과, 레벨업 시 UI 반짝임 효과, 아이템 획득 알림 애니메이션, 버튼 호버/클릭 효과, 화면 전환 페이드 효과",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "성능 최적화 및 게임 완성도 향상",
        "description": "40 FPS 이상 성능 확보와 게임 전반적인 완성도를 높입니다.",
        "details": "프레임레이트 최적화(스프라이트 배칭, 불필요한 렌더링 제거), 메모리 관리 최적화, 오브젝트 풀링 시스템 적용. 사운드 효과 추가(공격, 레벨업, 적 처치), 간단한 파티클 효과, 게임 밸런스 조정, 버그 수정 및 예외처리 강화. 2D 도트 또는 SVG 벡터 스타일 그래픽 완성.",
        "testStrategy": "다양한 환경에서 40 FPS 이상 유지 확인, 메모리 누수 검사, 장시간 플레이 안정성 테스트, 전체 게임플레이 시나리오 테스트.",
        "priority": "low",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "프레임레이트 프로파일링 및 병목지점 분석",
            "description": "게임의 현재 성능을 측정하고 프레임 드랍이 발생하는 병목지점을 식별합니다.",
            "dependencies": [],
            "details": "FPS 측정 도구 구현, 프로파일링 라이브러리(cProfile) 적용, 렌더링 시간 측정, CPU/메모리 사용량 모니터링, 성능 보고서 생성. 다양한 게임 상황(적 다수 스폰, 파티클 효과 등)에서 성능 측정.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "스프라이트 배칭 및 렌더링 최적화",
            "description": "렌더링 호출 횟수를 줄이고 스프라이트 배칭을 통해 그래픽 성능을 향상시킵니다.",
            "dependencies": [
              "10.1"
            ],
            "details": "pygame.sprite.Group 최적화, 더티 사각형 업데이트 구현, 스프라이트 배칭 시스템, 불필요한 렌더링 호출 제거, 화면 밖 오브젝트 컬링, 텍스처 아틀라스 적용. Surface 재사용 및 convert() 최적화.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "메모리 관리 및 가비지 컬렉션 최적화",
            "description": "메모리 사용량을 최적화하고 가비지 컬렉션으로 인한 프레임 드랍을 최소화합니다.",
            "dependencies": [
              "10.1"
            ],
            "details": "메모리 누수 검사 및 수정, 불필요한 객체 생성 최소화, 약한 참조(weakref) 활용, 가비지 컬렉션 튜닝, 메모리 풀링 시스템 구현. 대량의 임시 객체 생성을 피하는 코드 최적화.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "오브젝트 풀링 시스템 구현",
            "description": "자주 생성/삭제되는 게임 오브젝트들의 풀링 시스템을 구축하여 성능을 향상시킵니다.",
            "dependencies": [
              "10.3"
            ],
            "details": "투사체, 적, 파티클, 데미지 텍스트용 오브젝트 풀 구현. 풀 크기 자동 조절 시스템, 오브젝트 재활용 메커니즘, 풀 상태 모니터링. 메모리 할당/해제 오버헤드 최소화.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "사운드 효과 추가 및 오디오 시스템 최적화",
            "description": "게임에 몰입감을 주는 사운드 효과를 추가하고 오디오 시스템을 최적화합니다.",
            "dependencies": [],
            "details": "공격 사운드, 적 처치 사운드, 레벨업 사운드, 아이템 획득 사운드, 배경음악 시스템 구현. 사운드 풀링, 볼륨 조절, 사운드 옵션 설정, pygame.mixer 최적화. 동시 재생 제한 및 우선순위 시스템.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "파티클 효과 및 시각적 개선 구현",
            "description": "게임의 시각적 효과를 향상시키는 파티클 시스템과 시각적 개선사항을 추가합니다.",
            "dependencies": [
              "10.4"
            ],
            "details": "적 처치 시 파티클 효과, 레벨업 시 이펙트, 투사체 트레일 효과, 히트 이펙트 구현. 파티클 시스템 최적화, 이펙트 강도 옵션, 화면 셰이크 효과. 성능 영향 최소화를 위한 LOD 시스템.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "게임 밸런스 조정 및 튜닝",
            "description": "게임의 난이도 곡선과 밸런스를 조정하여 최적의 게임플레이 경험을 제공합니다.",
            "dependencies": [],
            "details": "적 스폰 레이트 조정, 체력/데미지 밸런싱, 경험치 획득량 조정, 아이템 효과 밸런싱, 생존 시간 기반 난이도 증가 시스템. 플레이테스트 데이터 수집 및 분석, 게임 곡선 최적화.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "버그 수정 및 예외처리 강화",
            "description": "게임의 안정성을 높이기 위해 버그를 수정하고 예외처리를 강화합니다.",
            "dependencies": [
              "10.2",
              "10.6"
            ],
            "details": "충돌 감지 오류 수정, 경계선 처리 개선, 메모리 오류 방지, try-catch 구문 추가, 로그 시스템 구현. 에러 리포팅, 크래시 방지, 안전한 종료 처리, 디버그 모드 추가.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "그래픽 스타일 완성 및 최종 폴리싱",
            "description": "2D 도트 또는 SVG 벡터 스타일로 그래픽을 완성하고 전체적인 게임 품질을 향상시킵니다.",
            "dependencies": [
              "10.5",
              "10.7",
              "10.8"
            ],
            "details": "일관된 아트 스타일 적용, 캐릭터/적 스프라이트 완성, UI 요소 디자인 개선, 색상 팔레트 통일, 애니메이션 추가. 전체적인 비주얼 품질 향상, 사용자 경험 개선, 최종 버그 픽스 및 코드 정리.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-06T10:05:12.101Z",
      "updated": "2025-08-06T10:05:12.101Z",
      "description": "Tasks for master context"
    }
  }
}